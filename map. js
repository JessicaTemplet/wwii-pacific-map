/* ---------- All data and logic for the map ---------- */

// GeoJSON data
const geoJsonData = {
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Japanese Empire 1931",
        "service": "Japanese Territory",
        "style": { "stroke": "#8B4513", "stroke-width": 2, "fill": "#DEB887", "fillOpacity": 0.3 }
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [[
          [129.0, 45.0], [145.0, 45.0], [145.0, 30.0], [129.0, 30.0], [129.0, 45.0]
        ]]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Maximum Japanese Expansion 1942",
        "service": "Extent of Japanese Control",
        "style": { "stroke": "#D0021B", "stroke-width": 3, "stroke-dasharray": "8,8", "fill": "none" }
      },
      "geometry": {
        "type": "LineString",
        "coordinates": [
          [173.0, 55.0], [120.0, 50.0], [95.0, 25.0], [95.0, -10.0],
          [120.0, -15.0], [155.0, -15.0], [175.0, -5.0], [180.0, 10.0],
          [175.0, 25.0], [173.0, -174.0]
        ]
      }
    },
    // ... rest of your features here, omitted for brevity in this snippet
  ]
};

// CSV data
const csvData = `id,name,start_date,end_date,lat,lon,side_offensive,domain,type,short_desc,source_url,marker_color,marker_symbol,label
1,Mukden Incident,1931-09-18,,41.805,123.431,Japan,land,battle,Japanese forces stage false flag attack on railway to justify Manchuria invasion,https://www.britannica.com/event/Mukden-Incident,#D0021B,1,01. Mukden Incident (Sep 18 1931)
2,Marco Polo Bridge,1937-07-07,,39.864,116.229,Japan,land,battle,Full-scale Second Sino-Japanese War begins with skirmish near Beijing,https://www.britannica.com/event/Marco-Polo-Bridge-Incident,#D0021B,2,02. Marco Polo Bridge (Jul 7 1937)
3,France Surrenders,1940-06-22,,48.8566,2.3522,Japan,political,surrender,Fall of France allows Japan to pressure French Indochina and tighten control,https://www.britannica.com/event/France-surrender-1940,#D0021B,3,03. France Surrenders (Jun 22 1940)
4,Pearl Harbor,1941-12-07,,21.3099,-157.8581,Japan,air,battle,Surprise attack on US Pacific Fleet kills 2400+ and brings America into WWII,https://www.nationalww2museum.org/war/articles/pearl-harbor-overview,#D0021B,4,04. Pearl Harbor (Dec 7 1941)
5,Philippines Attack,1941-12-08,,14.599,120.984,Japan,combined,battle,Japanese forces attack US bases in Philippines hours after Pearl Harbor,https://www.history.com/topics/world-war-ii/battle-of-the-philippines,#D0021B,5,05. Philippines Attack (Dec 8 1941)`;
// Add the rest of your CSV rows here

/* ---------- Helper functions ---------- */
function stripQuotes(s) { return (s || '').toString().replace(/^"|"$/g, ''); }
function normalizeLongitude(lon) { return ((lon + 540) % 360) - 180; }

function makeLdivIcon(html, className, size = 26) {
  return L.divIcon({
    html: `<div style="font-size: ${size}px; line-height: ${size}px;">${html}</div>`,
    className: className || 'custom-div-icon',
    iconSize: [size, size],
    iconAnchor: [size / 2, size / 2],
    popupAnchor: [0, -size / 2]
  });
}

function createNumberedIcon(number, side = 'USA') {
  let markerClass = '';
  if (side.toLowerCase() === 'japan') markerClass = 'japan';
  else if (side.toLowerCase() === 'joint') markerClass = 'joint';
  return L.divIcon({
    html: `<div class="numbered-marker ${markerClass}" style="width: 26px; height: 26px;">${number}</div>`,
    className: 'custom-div-icon',
    iconSize: [26, 26],
    iconAnchor: [13, 13],
    popupAnchor: [0, -13]
  });
}

/* ---------- Normalize GeoJSON ---------- */
function normalizeGeoJsonCoords(geoJson) {
  geoJson.features.forEach(feature => {
    const geom = feature.geometry;
    if (!geom || !geom.coordinates) return;
    if (geom.type === 'LineString') geom.coordinates = geom.coordinates.map(([lon, lat]) => [normalizeLongitude(lon), lat]);
    else if (geom.type === 'Polygon') geom.coordinates = geom.coordinates.map(ring => ring.map(([lon, lat]) => [normalizeLongitude(lon), lat]));
    else if (geom.type === 'MultiLineString') geom.coordinates = geom.coordinates.map(line => line.map(([lon, lat]) => [normalizeLongitude(lon), lat]));
    else if (geom.type === 'MultiPolygon') geom.coordinates = geom.coordinates.map(polygon => polygon.map(ring => ring.map(([lon, lat]) => [normalizeLongitude(lon), lat])));
  });
}

/* ---------- Load and render map ---------- */
async function loadAndRenderMap() {
  const map = L.map('map', { preferCanvas: true, minZoom: 2, maxZoom: 10 }).setView([20, 150], 3);

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© OpenStreetMap contributors', maxZoom: 18
  }).addTo(map);

  // Legend
  const legend = L.control({ position: 'bottomright' });
  legend.onAdd = () => {
    const div = L.DomUtil.create('div', 'legend');
    div.innerHTML = `
      <div class="legend-title">WWII Pacific Theater</div>
      <div class="legend-section">
        <div class="legend-section-title">Forces</div>
        <div class="legend-row"><span class="legend-swatch" style="background:#D0021B"></span><span class="legend-text">Japanese offensive</span></div>
        <div class="legend-row"><span class="legend-swatch" style="background:#1F6FEB"></span><span class="legend-text">US/Allied offensive</span></div>
        <div class="legend-row"><span class="legend-swatch" style="background:#7A3EE6"></span><span class="legend-text">Joint operations</span></div>
      </div>
      <div class="legend-section">
        <div class="legend-section-title">Special Events</div>
        <div class="legend-row"><span class="legend-swatch" style="background:#FF6B35;border-radius:3px;text-align:center;">&#x1F4A3;</span><span class="legend-text">Major bombing</span></div>
        <div class="legend-row"><span class="legend-swatch" style="background:#FF0000;border-radius:3px;text-align:center;">&#x2622;&#xFE0F;</span><span class="legend-text">Atomic weapons</span></div>
        <div class="legend-row"><span class="legend-swatch" style="background:#00AA00;border-radius:3px;text-align:center;">&#x1F3F3;&#xFE0F;</span><span class="legend-text">Surrender/Flag raising</span></div>
      </div>
      <div style="font-size:10px;color:#666;margin-top:8px;">Numbers indicate chronological order</div>
    `;
    return div;
  };
  legend.addTo(map);

  // Parse CSV
  const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });
  const rows = parsed.data || [];
  const specialIcons = {
    'bomb': makeLdivIcon('&#x1F4A3;', 'bomb-icon'),
    'atomic': makeLdivIcon('&#x2622;&#xFE0F;', 'atomic-icon'),
    'flag': makeLdivIcon('&#x1F3F3;&#xFE0F;', 'flag-icon')
  };

  const markerLayer = L.featureGroup();
  let validMarkers = 0;

  rows.forEach(r => {
    let lat = parseFloat(r.lat);
    let lon = parseFloat(r.lon);
    if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90) return;

    lon = normalizeLongitude(lon);

    const name = stripQuotes(r.name);
    const label = stripQuotes(r.label);
    const short_desc = stripQuotes(r.short_desc);
    const source = stripQuotes(r.source_url);
    const sideOffensive = stripQuotes(r.side_offensive);
    const markerSymbol = stripQuotes(r.marker_symbol);

    let marker;
    if (markerSymbol in specialIcons) marker = L.marker([lat, lon], { icon: specialIcons[markerSymbol] });
    else marker = L.marker([lat, lon], { icon: createNumberedIcon(markerSymbol, sideOffensive) });

    let popup = `<strong>${label || name}</strong>`;
    if (short_desc) popup += `<br>${short_desc}`;
    if (source) popup += `<br><a class="source" href="${source}" target="_blank" rel="noopener">Source</a>`;

    marker.addTo(markerLayer).bindPopup(popup, { maxWidth: 320, keepInView: true });
    validMarkers++;
  });

  markerLayer.addTo(map);

  // Normalize GeoJSON coords
  normalizeGeoJsonCoords(geoJsonData);

  // Add GeoJSON paths
  L.geoJSON(geoJsonData, {
    style: f => {
      const s = (f.properties && f.properties.style) || {};
      return {
        color: s.stroke || s.color || '#555',
        weight: s['stroke-width'] || s.weight || 2,
        dashArray: s['stroke-dasharray'] || s.dashArray || '6,4',
        opacity: s.opacity || 0.7,
        fillColor: s.fill || '#DEB887',
        fillOpacity: s.fillOpacity || 0
      };
    },
    onEachFeature: (f, l) => {
      if (f.properties) {
        const service = f.properties.service || f.properties.name || 'Military Operation';
        l.bindPopup(`<strong>${service}</strong>`);
      }
    }
  }).addTo(map);

  // Fit map to all markers + paths
  const allLayers = L.featureGroup([markerLayer]);
  allLayers.addLayer(L.geoJSON(geoJsonData));
  map.fitBounds(allLayers.getBounds(), { padding: [40, 40] });

  // Update badge
